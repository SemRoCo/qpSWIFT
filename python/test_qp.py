import numpy as np
import qpSWIFT
from scipy.sparse import csc_matrix

options = {
    "MAXITER": 10,  # Increase max iterations
    # "ABSTOL": 1e-8,   # Tighter tolerance
    # "RELTOL": 1e-8,   # Tighter tolerance
    "VERBOSE": 0  # Print details
}


def solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA):
    x_dense = qpSWIFT.solve(H, g, lb, ub, E, b, A, lbA, ubA, options)
    x = qpSWIFT.solve_sparse(csc_matrix(H), g, lb, ub, csc_matrix(E), b, csc_matrix(A), lbA, ubA, options)
    assert np.allclose(x_dense, x), f'dense/sparse: {x_dense} != {x}'
    # verify eq constraints
    Ex = E.dot(x)
    assert np.allclose(Ex, b), f'Ex: {Ex} == {b}'

    # verify box constraints
    assert np.less_equal(lb, x + 1.e-5).all(), f'lb: {lb} <= {x}'
    assert np.less_equal(x, ub + 1.e-5).all(), f'ub: {x} <= {ub}'

    # verify ineq constraints
    Ax = A.dot(x)
    assert np.less_equal(lbA, Ax + 1.e-5).all(), f'Ax: {lbA} <= {Ax} <= {ubA}'
    assert np.less_equal(Ax, ubA + 1.e-5).all(), f'Ax: {lbA} <= {Ax} <= {ubA}'


def test_solve_ineq_only_upper():
    H = np.array([[1.0, 0.0], [0.0, 1.0]])  # Identity matrix for quadratic cost
    g = np.array([0.0, 0.0])  # No linear cost

    E = np.zeros((0, 2))
    b = np.array([])

    lb = np.array([-np.inf, -np.inf])
    ub = np.array([np.inf, np.inf])

    for i in range(2):
        for j in range(2):
            if i == 0:
                A = np.array([[1.0, 1.0]])
            else:
                A = np.array([[-1.0, -1.0]])
            if j == 0:
                ubA = np.array([0.5])
            else:
                ubA = np.array([-0.5])
            lbA = np.array([-np.inf])
            solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)


def test_solve_ineq_only_lower():
    H = np.array([[1.0, 0.0], [0.0, 1.0]])  # Identity matrix for quadratic cost
    g = np.array([0.0, 0.0])  # No linear cost

    E = np.zeros((0, 2))
    b = np.array([])

    lb = np.array([-np.inf, -np.inf])
    ub = np.array([np.inf, np.inf])

    for i in range(2):
        for j in range(2):
            if i == 0:
                A = np.array([[1.0, 1.0]])
            else:
                A = np.array([[-1.0, -1.0]])
            if j == 0:
                lbA = np.array([0.5])
            else:
                lbA = np.array([-0.5])
            ubA = np.array([np.inf])
            solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)


def test_solve_eq_as_ineq():
    H = np.array([[1.0, 0.0], [0.0, 1.0]])  # Identity matrix for quadratic cost
    g = np.array([0.0, 0.0])  # No linear cost

    E = np.zeros((0, 2))
    b = np.array([])

    A = np.array([[1.0, 1.0]])
    lbA = np.array([-np.inf])
    ubA = np.array([-0.5])

    lb = np.array([-np.inf, -np.inf])
    ub = np.array([np.inf, np.inf])

    solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)


def test_solve_eq_and_ineq():
    H = np.array([[1.0, 0.0], [0.0, 1.0]])  # Identity matrix for quadratic cost
    g = np.array([0.0, 0.0])  # No linear cost

    E = np.array([[1.,0]])
    b = np.array([1.])

    A = np.array([[0.0, 1.0]])
    lbA = np.array([-np.inf])
    ubA = np.array([-0.5])

    lb = np.array([-np.inf, -np.inf])
    ub = np.array([np.inf, np.inf])

    solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)

def test_solve_eq_as_ineq_1_var():
    H = np.array([[1.0]])  # Identity matrix for quadratic cost
    g = np.array([0.0])  # No linear cost

    E = np.zeros((0, 1))
    b = np.array([])

    A = np.array([[1.0]])
    lbA = np.array([-np.inf])
    ubA = np.array([-1.0])

    lb = np.array([-np.inf])
    ub = np.array([np.inf])

    solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)

def test_solve_eq_as_ineq_1_var2():
    H = np.array([[1.0]])  # Identity matrix for quadratic cost
    g = np.array([0.0])  # No linear cost

    E = np.array([1.0])
    b = np.array([-2])

    A = np.array([[1.0]])
    lbA = np.array([-np.inf])
    ubA = np.array([1.0])

    lb = np.array([-np.inf])
    ub = np.array([np.inf])

    solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)


def test_solve_eq():
    H = np.array([[1.0, 0.0], [0.0, 1.0]])  # Identity matrix for quadratic cost
    g = np.array([0.0, 0.0])  # No linear cost

    E = np.array([[1.0, 1.0]])
    b = np.array([-0.5])

    A = np.zeros((0,2))
    lbA = np.array([])
    ubA = np.array([])

    lb = np.array([-np.inf, -np.inf])
    ub = np.array([np.inf, np.inf])

    solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)


def test_solve_qp_complex():
    H = np.array([[5.0, 1.0, 0.0],
                  [1.0, 2.0, 1.0],
                  [0.0, 1.0, 4.0]])  # Identity matrix for quadratic cost
    g = np.array([1.0, 2.0, 1.0])  # No linear cost

    E = np.array([[1.0, -2.0, 1.0]])
    b = np.array([3.0])

    A = np.array([[-4.0, -4.0, 0.0],
                  [0.0, 0.0, -1.0]])
    lbA = np.array([-np.inf, -np.inf])
    ubA = np.array([-1.0, -1.0])

    lb = np.array([-np.inf, -np.inf, -np.inf])
    ub = np.array([np.inf, np.inf, np.inf])

    solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)

# def test_solve_complex():
#     g = np.zeros(255, dtype=float)
#
#     h_box = np.array([2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 3.11111051e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 2.33333166e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 1.16666848e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 3.88892985e-01, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 2.74666974e-06, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 1.00000102e+00, 1.00000000e+00, 1.30006605e-02, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 3.49999947e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 3.49999947e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 3.49999947e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 3.49999947e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.30006605e-02, 2.00000000e-01, 2.00000000e-01, 2.00000000e-01, 1.00000102e+00, 3.49999947e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.00000102e+00, 1.00000000e+00, 1.99996365e-01, 1.49999693e-01, 1.00000102e+00, 0.00000000e+00, 1.00000000e+00, 1.30006605e-02, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 8.88660000e+00, 8.88660000e+00, 8.88660000e+00, 4.44457000e+01, 1.55555000e+02, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 8.88660000e+00, 6.66510000e+00, 4.44457000e+01, 4.44457000e+01, 4.44457000e+01, 5.78900000e-01, 1.55781469e+00, 1.62544631e+00, 2.00000000e+00, 2.00000000e+00, 2.00000000e+00, 2.00000000e+00, 2.00000000e+00, 2.00000000e+00, 1.24573752e+00])
#
#     h = np.array([-0.05, -0.05, -0.04592435, -0.04222247, -0.03667071, -0.03349079, -0.01099738, -0.00657185, 0.05])
#
#     H = np.array([2.50000000e-02, 2.50000000e-02, 2.50000000e-02, 1.00000000e-03, 8.16326531e-05, 1.00000000e-03, 1.00000000e-03, 2.50000000e-02, 4.44444444e-02, 1.00000000e-03, 1.00000000e-03, 1.00000000e-03, 1.00000000e-03, 1.00000000e-03, 2.50000000e-02, 4.44444444e-02, 1.00000000e-03, 1.00000000e-03, 1.00000000e-03, 5.91715976e+00, 8.12500000e-02, 8.12500000e-02, 8.12500000e-02, 3.25000000e-03, 2.65306122e-04, 3.25000000e-03, 3.25000000e-03, 8.12500000e-02, 1.44444444e-01, 3.25000000e-03, 3.25000000e-03, 3.25000000e-03, 3.25000000e-03, 3.25000000e-03, 8.12500000e-02, 1.44444444e-01, 3.25000000e-03, 3.25000000e-03, 3.25000000e-03, 1.92307692e+01, 1.37500000e-01, 1.37500000e-01, 1.37500000e-01, 5.50000000e-03, 4.48979592e-04, 5.50000000e-03, 5.50000000e-03, 1.37500000e-01, 2.44444444e-01, 5.50000000e-03, 5.50000000e-03, 5.50000000e-03, 5.50000000e-03, 5.50000000e-03, 1.37500000e-01, 2.44444444e-01, 5.50000000e-03, 5.50000000e-03, 5.50000000e-03, 3.25443787e+01, 1.93750000e-01, 1.93750000e-01, 1.93750000e-01, 7.75000000e-03, 6.32653061e-04, 7.75000000e-03, 7.75000000e-03, 1.93750000e-01, 3.44444444e-01, 7.75000000e-03, 7.75000000e-03, 7.75000000e-03, 7.75000000e-03, 7.75000000e-03, 1.93750000e-01, 3.44444444e-01, 7.75000000e-03, 7.75000000e-03, 7.75000000e-03, 4.58579882e+01, 2.50000000e-01, 2.50000000e-01, 2.50000000e-01, 1.00000000e-02, 8.16326531e-04, 1.00000000e-02, 1.00000000e-02, 2.50000000e-01, 4.44444444e-01, 1.00000000e-02, 1.00000000e-02, 1.00000000e-02, 1.00000000e-02, 1.00000000e-02, 2.50000000e-01, 4.44444444e-01, 1.00000000e-02, 1.00000000e-02, 1.00000000e-02, 5.91715976e+01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.25000000e+04, 1.25000000e+04, 1.25000000e+04, 1.25000000e+04, 1.25000000e+04, 1.25000000e+04, 6.25000000e+01, 6.25000000e+01, 6.25000000e+01, 6.25000000e+01, 6.25000000e+01, 6.25000000e+01, 6.25000000e+01, 6.25000000e+01, 2.50000000e+02])
#
#
#     A_data = np.array([5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 4.64283933e-17, 8.34194286e-17, -0.00000000e+00, -4.64314522e-17, -0.00000000e+00, 4.05136404e-17, -0.00000000e+00, -0.00000000e+00, -1.62957168e-02, -2.12209808e-02, -1.57944035e-02, -2.19759757e-02, 1.60228749e-02, 2.11644578e-02, 1.55985027e-02, 2.17780767e-02, 1.32518704e-03, 1.57401163e-04, 9.30291518e-04, -5.01258892e-04, 7.39386497e-05, 2.55381025e-05, 4.80269568e-05, -1.06720289e-05, -1.30651870e-02, -1.30781878e-02, -1.34567098e-02, -1.34469462e-02, -6.89571683e-03, -1.18209808e-02, -6.39440353e-03, -1.25759757e-02, 7.77600029e-04, -9.32427469e-04, 3.65966655e-03, -1.52732133e-03, 4.24456180e-03, 1.45152830e-03, 1.39952548e-04, 1.07523534e-03, -5.37045410e-04, 2.62626297e-04, -2.59934043e-04, 2.99042317e-04, -3.55696242e-04, 1.16819478e-03, 4.78270558e-05, 7.48496310e-04, -5.97480113e-04, -6.33134050e-05, -1.87119800e-05, -3.62518435e-05, 1.73193985e-05, -1.32339776e-02, -1.31720723e-02, -1.36307197e-02, -1.35558787e-02, 6.62287491e-03, 1.17644578e-02, 6.19850273e-03, 1.23780767e-02, 1.70620516e-04, 1.24182501e-03, -3.57644991e-03, 1.76661038e-03, -4.02452780e-03, 1.30421324e-03, 3.29781661e-05, 9.00921740e-04, -6.26383797e-04, -2.84139342e-04, 2.57703774e-04, -3.12128408e-04, 3.39084149e-04, 4.64283933e-17, -8.34194286e-17, -0.00000000e+00, -0.00000000e+00, 2.12428265e-17, -6.07704606e-17, -1.52498769e-17, -1.45426558e-17, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 4.64283933e-17, 8.34194286e-17, -0.00000000e+00, -4.64314522e-17, -0.00000000e+00, 4.05136404e-17, -0.00000000e+00, -0.00000000e+00, -1.62957168e-02, -2.12209808e-02, -1.57944035e-02, -2.19759757e-02, 1.60228749e-02, 2.11644578e-02, 1.55985027e-02, 2.17780767e-02, 1.32518704e-03, 1.57401163e-04, 9.30291518e-04, -5.01258892e-04, 7.39386497e-05, 2.55381025e-05, 4.80269568e-05, -1.06720289e-05, -1.30651870e-02, -1.30781878e-02, -1.34567098e-02, -1.34469462e-02, -6.89571683e-03, -1.18209808e-02, -6.39440353e-03, -1.25759757e-02, 7.77600029e-04, -9.32427469e-04, 3.65966655e-03, -1.52732133e-03, 4.24456180e-03, 1.45152830e-03, 1.39952548e-04, 1.07523534e-03, -5.37045410e-04, 2.62626297e-04, -2.59934043e-04, 2.99042317e-04, -3.55696242e-04, 1.16819478e-03, 4.78270558e-05, 7.48496310e-04, -5.97480113e-04, -6.33134050e-05, -1.87119800e-05, -3.62518435e-05, 1.73193985e-05, -1.32339776e-02, -1.31720723e-02, -1.36307197e-02, -1.35558787e-02, 6.62287491e-03, 1.17644578e-02, 6.19850273e-03, 1.23780767e-02, 1.70620516e-04, 1.24182501e-03, -3.57644991e-03, 1.76661038e-03, -4.02452780e-03, 1.30421324e-03, 3.29781661e-05, 9.00921740e-04, -6.26383797e-04, -2.84139342e-04, 2.57703774e-04, -3.12128408e-04, 3.39084149e-04, 4.64283933e-17, -8.34194286e-17, -0.00000000e+00, -0.00000000e+00, 2.12428265e-17, -6.07704606e-17, -1.52498769e-17, -1.45426558e-17, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 4.64283933e-17, 8.34194286e-17, -0.00000000e+00, -4.64314522e-17, -0.00000000e+00, 4.05136404e-17, -0.00000000e+00, -0.00000000e+00, -1.62957168e-02, -2.12209808e-02, -1.57944035e-02, -2.19759757e-02, 1.60228749e-02, 2.11644578e-02, 1.55985027e-02, 2.17780767e-02, 1.32518704e-03, 1.57401163e-04, 9.30291518e-04, -5.01258892e-04, 7.39386497e-05, 2.55381025e-05, 4.80269568e-05, -1.06720289e-05, -1.30651870e-02, -1.30781878e-02, -1.34567098e-02, -1.34469462e-02, -6.89571683e-03, -1.18209808e-02, -6.39440353e-03, -1.25759757e-02, 7.77600029e-04, -9.32427469e-04, 3.65966655e-03, -1.52732133e-03, 4.24456180e-03, 1.45152830e-03, 1.39952548e-04, 1.07523534e-03, -5.37045410e-04, 2.62626297e-04, -2.59934043e-04, 2.99042317e-04, -3.55696242e-04, 1.16819478e-03, 4.78270558e-05, 7.48496310e-04, -5.97480113e-04, -6.33134050e-05, -1.87119800e-05, -3.62518435e-05, 1.73193985e-05, -1.32339776e-02, -1.31720723e-02, -1.36307197e-02, -1.35558787e-02, 6.62287491e-03, 1.17644578e-02, 6.19850273e-03, 1.23780767e-02, 1.70620516e-04, 1.24182501e-03, -3.57644991e-03, 1.76661038e-03, -4.02452780e-03, 1.30421324e-03, 3.29781661e-05, 9.00921740e-04, -6.26383797e-04, -2.84139342e-04, 2.57703774e-04, -3.12128408e-04, 3.39084149e-04, 4.64283933e-17, -8.34194286e-17, -0.00000000e+00, -0.00000000e+00, 2.12428265e-17, -6.07704606e-17, -1.52498769e-17, -1.45426558e-17, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 4.64283933e-17, 8.34194286e-17, -0.00000000e+00, -4.64314522e-17, -0.00000000e+00, 4.05136404e-17, -0.00000000e+00, -0.00000000e+00, -1.62957168e-02, -2.12209808e-02, -1.57944035e-02, -2.19759757e-02, 1.60228749e-02, 2.11644578e-02, 1.55985027e-02, 2.17780767e-02, 1.32518704e-03, 1.57401163e-04, 9.30291518e-04, -5.01258892e-04, 7.39386497e-05, 2.55381025e-05, 4.80269568e-05, -1.06720289e-05, -1.30651870e-02, -1.30781878e-02, -1.34567098e-02, -1.34469462e-02, -6.89571683e-03, -1.18209808e-02, -6.39440353e-03, -1.25759757e-02, 7.77600029e-04, -9.32427469e-04, 3.65966655e-03, -1.52732133e-03, 4.24456180e-03, 1.45152830e-03, 1.39952548e-04, 1.07523534e-03, -5.37045410e-04, 2.62626297e-04, -2.59934043e-04, 2.99042317e-04, -3.55696242e-04, 1.16819478e-03, 4.78270558e-05, 7.48496310e-04, -5.97480113e-04, -6.33134050e-05, -1.87119800e-05, -3.62518435e-05, 1.73193985e-05, -1.32339776e-02, -1.31720723e-02, -1.36307197e-02, -1.35558787e-02, 6.62287491e-03, 1.17644578e-02, 6.19850273e-03, 1.23780767e-02, 1.70620516e-04, 1.24182501e-03, -3.57644991e-03, 1.76661038e-03, -4.02452780e-03, 1.30421324e-03, 3.29781661e-05, 9.00921740e-04, -6.26383797e-04, -2.84139342e-04, 2.57703774e-04, -3.12128408e-04, 3.39084149e-04, 4.64283933e-17, -8.34194286e-17, -0.00000000e+00, -0.00000000e+00, 2.12428265e-17, -6.07704606e-17, -1.52498769e-17, -1.45426558e-17, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 4.64283933e-17, 8.34194286e-17, -0.00000000e+00, -4.64314522e-17, -0.00000000e+00, 4.05136404e-17, -0.00000000e+00, -0.00000000e+00, -1.62957168e-02, -2.12209808e-02, -1.57944035e-02, -2.19759757e-02, 1.60228749e-02, 2.11644578e-02, 1.55985027e-02, 2.17780767e-02, 1.32518704e-03, 1.57401163e-04, 9.30291518e-04, -5.01258892e-04, 7.39386497e-05, 2.55381025e-05, 4.80269568e-05, -1.06720289e-05, -1.30651870e-02, -1.30781878e-02, -1.34567098e-02, -1.34469462e-02, -6.89571683e-03, -1.18209808e-02, -6.39440353e-03, -1.25759757e-02, 7.77600029e-04, -9.32427469e-04, 3.65966655e-03, -1.52732133e-03, 4.24456180e-03, 1.45152830e-03, 1.39952548e-04, 1.07523534e-03, -5.37045410e-04, 2.62626297e-04, -2.59934043e-04, 2.99042317e-04, -3.55696242e-04, 1.16819478e-03, 4.78270558e-05, 7.48496310e-04, -5.97480113e-04, -6.33134050e-05, -1.87119800e-05, -3.62518435e-05, 1.73193985e-05, -1.32339776e-02, -1.31720723e-02, -1.36307197e-02, -1.35558787e-02, 6.62287491e-03, 1.17644578e-02, 6.19850273e-03, 1.23780767e-02, 1.70620516e-04, 1.24182501e-03, -3.57644991e-03, 1.76661038e-03, -4.02452780e-03, 1.30421324e-03, 3.29781661e-05, 9.00921740e-04, -6.26383797e-04, -2.84139342e-04, 2.57703774e-04, -3.12128408e-04, 3.39084149e-04, 4.64283933e-17, -8.34194286e-17, -0.00000000e+00, -0.00000000e+00, 2.12428265e-17, -6.07704606e-17, -1.52498769e-17, -1.45426558e-17, -5.00000000e-02, -5.00000000e-02, -5.00000000e-02, -5.00000000e-02, -5.00000000e-02, -5.00000000e-02, -5.00000000e-02, -5.00000000e-02, -5.00000000e-02])
#     A_indicies = np.array([0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 8, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 8, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 8, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 8, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 8, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8], dtype=int)
#     A_indptr = np.array([0, 8, 16, 24, 24, 24, 28, 32, 36, 41, 45, 49, 53, 57, 61, 65, 70, 74, 78, 82, 90, 98, 106, 114, 114, 114, 118, 122, 126, 131, 135, 139, 143, 147, 151, 155, 160, 164, 168, 172, 180, 188, 196, 204, 204, 204, 208, 212, 216, 221, 225, 229, 233, 237, 241, 245, 250, 254, 258, 262, 270, 278, 286, 294, 294, 294, 298, 302, 306, 311, 315, 319, 323, 327, 331, 335, 340, 344, 348, 352, 360, 368, 376, 384, 384, 384, 388, 392, 396, 401, 405, 409, 413, 417, 421, 425, 430, 434, 438, 442, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459], dtype=int)
#     A_shape = (9, 255)
#     A = csc_matrix((A_data, A_indicies, A_indptr), shape=A_shape)
#
#     E_data = np.array([-1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 5.00000000e-02, 0.00000000e+00, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 5.00000000e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 1.87885901e-02, 3.15107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 7.65085993e-05, 2.43514770e-02, -5.65682901e-03, 7.89714760e-04, -5.89870048e-03, -2.43030834e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.48750473e-02, -6.38760852e-04, -2.41329818e-03, -5.27780178e-05, -8.65380051e-04, 2.36212565e-04, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.60665651e-02, 1.90922010e-02, -1.53406145e-03, -1.30292595e-02, 1.17676513e-02, -2.65329906e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 9.38859013e-03, 3.40107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 4.34575764e-03, -5.58368722e-03, -2.39778403e-02, -1.40561038e-03, -2.35946706e-02, 5.68768465e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.20854207e-06, 2.41708414e-02, -6.38517229e-03, 8.42848953e-04, -2.40731069e-03, -8.63101737e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.50000000e-02, -1.25000000e-06, 3.46979347e-19, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.00000000e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 5.00000000e-02, 0.00000000e+00, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 5.00000000e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 1.87885901e-02, 3.15107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 7.65085993e-05, 2.43514770e-02, -5.65682901e-03, 7.89714760e-04, -5.89870048e-03, -2.43030834e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.48750473e-02, -6.38760852e-04, -2.41329818e-03, -5.27780178e-05, -8.65380051e-04, 2.36212565e-04, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.60665651e-02, 1.90922010e-02, -1.53406145e-03, -1.30292595e-02, 1.17676513e-02, -2.65329906e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 9.38859013e-03, 3.40107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 4.34575764e-03, -5.58368722e-03, -2.39778403e-02, -1.40561038e-03, -2.35946706e-02, 5.68768465e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.20854207e-06, 2.41708414e-02, -6.38517229e-03, 8.42848953e-04, -2.40731069e-03, -8.63101737e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.50000000e-02, -1.25000000e-06, 3.46979347e-19, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.00000000e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 5.00000000e-02, 0.00000000e+00, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 5.00000000e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 1.87885901e-02, 3.15107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 7.65085993e-05, 2.43514770e-02, -5.65682901e-03, 7.89714760e-04, -5.89870048e-03, -2.43030834e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.48750473e-02, -6.38760852e-04, -2.41329818e-03, -5.27780178e-05, -8.65380051e-04, 2.36212565e-04, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.60665651e-02, 1.90922010e-02, -1.53406145e-03, -1.30292595e-02, 1.17676513e-02, -2.65329906e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 9.38859013e-03, 3.40107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 4.34575764e-03, -5.58368722e-03, -2.39778403e-02, -1.40561038e-03, -2.35946706e-02, 5.68768465e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.20854207e-06, 2.41708414e-02, -6.38517229e-03, 8.42848953e-04, -2.40731069e-03, -8.63101737e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.50000000e-02, -1.25000000e-06, 3.46979347e-19, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.00000000e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 5.00000000e-02, 0.00000000e+00, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 5.00000000e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 1.87885901e-02, 3.15107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 7.65085993e-05, 2.43514770e-02, -5.65682901e-03, 7.89714760e-04, -5.89870048e-03, -2.43030834e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.48750473e-02, -6.38760852e-04, -2.41329818e-03, -5.27780178e-05, -8.65380051e-04, 2.36212565e-04, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.60665651e-02, 1.90922010e-02, -1.53406145e-03, -1.30292595e-02, 1.17676513e-02, -2.65329906e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 9.38859013e-03, 3.40107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 4.34575764e-03, -5.58368722e-03, -2.39778403e-02, -1.40561038e-03, -2.35946706e-02, 5.68768465e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.20854207e-06, 2.41708414e-02, -6.38517229e-03, 8.42848953e-04, -2.40731069e-03, -8.63101737e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.50000000e-02, -1.25000000e-06, 3.46979347e-19, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.00000000e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 5.00000000e-02, 0.00000000e+00, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 5.00000000e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 1.87885901e-02, 3.15107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 7.65085993e-05, 2.43514770e-02, -5.65682901e-03, 7.89714760e-04, -5.89870048e-03, -2.43030834e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.48750473e-02, -6.38760852e-04, -2.41329818e-03, -5.27780178e-05, -8.65380051e-04, 2.36212565e-04, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.60665651e-02, 1.90922010e-02, -1.53406145e-03, -1.30292595e-02, 1.17676513e-02, -2.65329906e-02, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.64746171e-03, -2.30532464e-04, 2.48583547e-02, 9.38859013e-03, 3.40107550e-02, 0.00000000e+00, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 4.34575764e-03, -5.58368722e-03, -2.39778403e-02, -1.40561038e-03, -2.35946706e-02, 5.68768465e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 1.20854207e-06, 2.41708414e-02, -6.38517229e-03, 8.42848953e-04, -2.40731069e-03, -8.63101737e-03, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 2.50000000e-02, -1.25000000e-06, 3.46979347e-19, -1.00000000e+00, 2.00000000e+00, -1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.00000000e-02, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 2.50000000e-03, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02, 5.00000000e-02])
#     E_indicies = np.array([0, 20, 40, 143, 144, 145, 1, 21, 41, 143, 144, 145, 2, 22, 42, 140, 141, 142, 143, 144, 145, 3, 23, 43, 4, 24, 44, 5, 25, 45, 6, 26, 46, 7, 27, 47, 8, 28, 48, 9, 29, 49, 10, 30, 50, 11, 31, 51, 12, 32, 52, 140, 141, 142, 143, 144, 145, 13, 33, 53, 140, 141, 142, 143, 144, 145, 14, 34, 54, 140, 141, 142, 143, 144, 145, 15, 35, 55, 140, 141, 142, 143, 144, 145, 16, 36, 56, 140, 141, 142, 143, 144, 145, 17, 37, 57, 140, 141, 142, 143, 144, 145, 18, 38, 58, 140, 141, 142, 19, 39, 59, 143, 144, 145, 20, 40, 60, 143, 144, 145, 21, 41, 61, 143, 144, 145, 22, 42, 62, 140, 141, 142, 143, 144, 145, 23, 43, 63, 24, 44, 64, 25, 45, 65, 26, 46, 66, 27, 47, 67, 28, 48, 68, 29, 49, 69, 30, 50, 70, 31, 51, 71, 32, 52, 72, 140, 141, 142, 143, 144, 145, 33, 53, 73, 140, 141, 142, 143, 144, 145, 34, 54, 74, 140, 141, 142, 143, 144, 145, 35, 55, 75, 140, 141, 142, 143, 144, 145, 36, 56, 76, 140, 141, 142, 143, 144, 145, 37, 57, 77, 140, 141, 142, 143, 144, 145, 38, 58, 78, 140, 141, 142, 39, 59, 79, 143, 144, 145, 40, 60, 80, 143, 144, 145, 41, 61, 81, 143, 144, 145, 42, 62, 82, 140, 141, 142, 143, 144, 145, 43, 63, 83, 44, 64, 84, 45, 65, 85, 46, 66, 86, 47, 67, 87, 48, 68, 88, 49, 69, 89, 50, 70, 90, 51, 71, 91, 52, 72, 92, 140, 141, 142, 143, 144, 145, 53, 73, 93, 140, 141, 142, 143, 144, 145, 54, 74, 94, 140, 141, 142, 143, 144, 145, 55, 75, 95, 140, 141, 142, 143, 144, 145, 56, 76, 96, 140, 141, 142, 143, 144, 145, 57, 77, 97, 140, 141, 142, 143, 144, 145, 58, 78, 98, 140, 141, 142, 59, 79, 99, 143, 144, 145, 60, 80, 100, 143, 144, 145, 61, 81, 101, 143, 144, 145, 62, 82, 102, 140, 141, 142, 143, 144, 145, 63, 83, 103, 64, 84, 104, 65, 85, 105, 66, 86, 106, 67, 87, 107, 68, 88, 108, 69, 89, 109, 70, 90, 110, 71, 91, 111, 72, 92, 112, 140, 141, 142, 143, 144, 145, 73, 93, 113, 140, 141, 142, 143, 144, 145, 74, 94, 114, 140, 141, 142, 143, 144, 145, 75, 95, 115, 140, 141, 142, 143, 144, 145, 76, 96, 116, 140, 141, 142, 143, 144, 145, 77, 97, 117, 140, 141, 142, 143, 144, 145, 78, 98, 118, 140, 141, 142, 79, 99, 119, 143, 144, 145, 80, 100, 120, 143, 144, 145, 81, 101, 121, 143, 144, 145, 82, 102, 122, 140, 141, 142, 143, 144, 145, 83, 103, 123, 84, 104, 124, 85, 105, 125, 86, 106, 126, 87, 107, 127, 88, 108, 128, 89, 109, 129, 90, 110, 130, 91, 111, 131, 92, 112, 132, 140, 141, 142, 143, 144, 145, 93, 113, 133, 140, 141, 142, 143, 144, 145, 94, 114, 134, 140, 141, 142, 143, 144, 145, 95, 115, 135, 140, 141, 142, 143, 144, 145, 96, 116, 136, 140, 141, 142, 143, 144, 145, 97, 117, 137, 140, 141, 142, 143, 144, 145, 98, 118, 138, 140, 141, 142, 99, 119, 139, 143, 144, 145, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], dtype=int)
#     E_indptr = np.array([0, 6, 12, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 57, 66, 75, 84, 93, 102, 108, 114, 120, 126, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 171, 180, 189, 198, 207, 216, 222, 228, 234, 240, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 285, 294, 303, 312, 321, 330, 336, 342, 348, 354, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 399, 408, 417, 426, 435, 444, 450, 456, 462, 468, 477, 480, 483, 486, 489, 492, 495, 498, 501, 504, 513, 522, 531, 540, 549, 558, 564, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716], dtype=int)
#     E_shape = (146, 255)
#     E = csc_matrix((E_data, E_indicies, E_indptr), shape=E_shape)
#
#     b = np.array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.00756357, 0.05, 0.01530287, 0.05, -0.0042282, 0.05])
#
#     H = np.diag(H)
#
#     E = E.toarray()
#
#     A = A.toarray()
#     lbA = np.ones(h.shape) * -np.inf
#     ubA = h
#
#     lb = np.array([-np.inf, -np.inf])
#     ub = np.array([np.inf, np.inf])
#
#     solve_and_verify_qp_solution(H, g, lb, ub, E, b, A, lbA, ubA)

